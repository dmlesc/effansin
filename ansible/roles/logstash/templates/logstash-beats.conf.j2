input {
  beats {
    port => 5044
    host => "{{ ansible_default_ipv4.address }}"
  }
}
filter {
  grok {
    match => { "message" => ["%{SYSLOGTIMESTAMP:[syslog_timestamp]} %{SYSLOGHOST:[hostname]} %{DATA:[program]}(?:\[%{POSINT:[pid]}\])?: %{GREEDYMULTILINE:[syslog_message]}"] }
    pattern_definitions => { "GREEDYMULTILINE" => "(.|\n)*" }
  }
  date {
    match => [ "[syslog_timestamp]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    target => "@timestamp"
  }
  if [program] == "grafana-server" {
    kv {
      source => "syslog_message"
    }
    mutate {
      remove_field => [ "syslog_message", "t", "logger" ]
    }
  }
  if [program] == "kibana" {
    json {
      source => "syslog_message"
    }
    mutate {
      rename => { 
        "statusCode" => "status"
        "[res][contentLength]" => "size"
        "[res][responseTime]" => "time_ms"
        "[req][headers][user-agent]" => "user_agent"
        "[req][referer]" => "referer"
        "[req][method]" => "method"
        "[req][remoteAddress]" => "remote_addr"
        "[req][url]" => "path"
      }
      uppercase => [ "method" ]
      remove_field => [ "[res]", "[req]", "syslog_message" ]
    }
  }
  if [program] == "prometheus" {
    kv {
      source => "syslog_message"
    }
    mutate {
      rename => { 
        "level" => "lvl"
        "filename" => "path"
      }
      remove_field => [ "ts", "syslog_message" ]
    }
  }
  mutate {
    remove_field => [ "syslog_timestamp", "message", "type", "input_type", "offset", "hostname", "[beat]" ]
  }
}
output {
  elasticsearch {
    hosts => "http://{{ ansible_default_ipv4.address }}:9200"
    manage_template => false
    index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
  }
}